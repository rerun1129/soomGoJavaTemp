package chapter07._03_abstractclass;

public abstract class AbstractClass {
    /**
     * 추상 클래스의 장단점
     * 장점
     * 1.클래스의 설계도처럼 공통 기능은 추상 클래스에서 구현해두고 개별 기능은 구현 클래스에서 구현하도록 추상 메서드로 만들어둘 수 있다.
     * 2.부모 클래스로서 자식 클래스의 구현 기준을 마련해줄 수 있다.
     * 3.상속을 통해서 추상 메서드의 구현을 하기 때문에 다형성을 통한 객체 지향 프로그래밍에 알맞다.
     * 4.개발툴에서 간단하게 오버라이딩할 메서드를 가져올 수 있다.
     * 5.(8장과 연계)인터페이스와는 달리 멤버 변수를 가질 수 있다.
     *
     * 단점
     * 1.상속을 전제로 만들어지는 객체 타입이기 때문에 다중 상속이 불가능한 자바의 언어적 특성에 의해 한계가 지어진다.
     * 2.(중요) 자바 5버전 이후에 인터페이스라는 추상 클래스의 상위 호환 객체 타입이 생겨났다. [8장에서 학습합니다.]
     *   => (물론 인터페이스가 있어 추상 클래스를 절대 쓰지 않는다는 것은 아니고 필요에 의해서 가끔 추상 클래스를 사용하는 경우도 있다.)
     * */

    protected abstract void needImplement(); //추상 메서드로 선언하면 구현 블록을 선언하면 안되고 이 시그니처대로 만들어줘야 한다.

    void defaultMethod(){

    } //일반 메서드로 선언하면 추상 클래스 내부에서 구현 블록을 만들어서 함수가 동작하도록 해줘야 한다.
}
