package chapter06._01_classmember;

public class Singleton {
    /**
     * 싱글톤을 쓰는 이유
     *
     * 수십 개의 메서드, 수십 개의 멤버 변수가 존재하는 객체의 경우에는 하나의 인스턴스를 새로 만드는 것 자체가 메모리에 큰 부담이 된다.
     * 그리고 이를 사용자들이 수십, 수백, 많게는 한번에 수천개를 사용한다고 가정하면 Heap 메모리가 4GB 이상이라고 하도 버텨낼 재간이 없다.
     * 따라서, 이렇게 무거운 객체의 인스턴스를 굳이 매번 new 키워드로 새로 생성하지 않아도 된다면 Heap 메모리 최적화에 큰 도움이 된다.
     * 그래서 싱글톤을 쓰는 것이지만 User와 같이 그 인스턴스의 특성이 서로 매우 잦은 빈도로 다른 경우에는 어쩔 수 없이 싱글톤 사용을 포기해야 하지만
     * 그렇지 않다면 싱글톤 사용이 주는 이득이 크다.
     * 추후에 배우겠지만 싱글톤을 정말 자주, 많이 사용하는 부분은 스프링의 Bean 컨테이너이다.
     * 이 Bean 이라는 것은 미리 지정된 클래스의 인스턴스를 최초 1회 호출 시 생성해 둔 뒤에 필요할 때 이미 생성된 인스턴스를 가져가서 사용한다.
     * Bean 인스턴스는 따로 멤버 변수나 상태값을 가지고 있지 않고 기능 동작에 필요한 메서드들만 많이 가지고 있고 매우 자주 사용되기 때문에 싱글톤을 사용하기 가장 적합한 사례이다.
     * */

    private static final Singleton SINGLETON = new Singleton();

    private Singleton () {} //외부에서 생성자 호출을 불가능하게 막기

    public static Singleton getInstance() {
        return SINGLETON; //인스턴스는 여기 하나에서만 관리한다.
    }
}
