package chapter06._05_accessmodifier;

public class Encapsulation {
    /**
     * 클래스 레벨에서 private와 protected를 사용을 막는 이유
     * 접근 제한자의 목적과 클래스 레벨의 범위가 상이
     * 해당 클래스 전체의 접근 범위를 제한하는 것이 아니라, 클래스 자체의 존재를 제한하는 것이 되므로 모순
     * 클래스 레벨의 접근 제한자는 해당 클래스가 패키지 외부에 공개되는 범위를 명시하는 것이 주 목적
     * 애초에 패키지 밖에서 못쓰는 클래스를 굳이 정의할 이유가 없다
     * */


    /**
     * - 데이터와 관련 기능을 가진 객체를 묶어서 감추는 것
     * - 객체라는 것의 정의에 가장 부합하는 프로그래밍 특성
     * - 정보 은닉의 의미가 포함되어 있으나 본질적인 캡슐화의 의미는 아니다.
     * - 캡슐화의 가장 중요한 의미는 외부에 영향을 주지 않고 객체의 내부 구현을 변경할 수 있다는 것이다.
     * - 객체는 서로 상호작용해야하지만 객체 내부의 데이터 및 기능은 그 객체가 책임져야 한다.
     * - 책임이라는 의미에서 해당 객체가 접근 수준을 완화하게 되면 그만큼 객체가 책임져야 하는 범위가 기하급수적으로 늘어날 수 있기 때문에 적절한 캡슐화를 통해서 책임의 범위를 좁히는 것이다.
     * - 캡슐화를 시도하게 되면 해당 기능 단위에 대한 이해를 높일 수 있다.
     * */
}